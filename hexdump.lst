     1                                  ; Executable name : hexdump
     2                                  ; Version : 1.0
     3                                  ; Created date : December 16, 2020
     4                                  ; Updated date : December 16, 2020
     5                                  ; Author : Olga Agafonova
     6                                  ; Description : An exercise from the "Assembly Language Step-by-Step" book
     7                                  ;
     8                                  ; Build using these commands or use the makefile:
     9                                  ; nasm -f elf -g -F stabs hexdump.asm
    10                                  ; ld -o hexdump hexdump.o
    11                                  ;
    12                                  ; Run it this way:
    13                                  ;
    14                                  ; hexdump < inputfile.txt
    15                                  ; 
    16                                  ; The input file should contain plain text. The program will generate a hex dump of the text.
    17                                  
    18                                  
    19                                  section .bss ; Section containing uninitialized data
    20                                  
    21                                      BUFFLEN equ 16          ; We read the file 16 bytes at a time
    22 00000000 <res 10h>                   Buff: resb BUFFLEN      ; Text buffer itself
    23                                  
    24                                  section .data               ; Section containing initialized data
    25                                  
    26 00000000 203030203030203030-         HexStr: db " 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00",10
    26 00000009 203030203030203030-
    26 00000012 203030203030203030-
    26 0000001B 203030203030203030-
    26 00000024 203030203030203030-
    26 0000002D 2030300A           
    27                                      HEXLEN equ $-HexStr
    28 00000031 303132333435363738-         Digits: db "0123456789ABCDEF"
    28 0000003A 39414243444546     
    29                                  
    30                                  section .text
    31                                  
    32                                  global _start
    33                                  
    34                                  _start:
    35                                  
    36 00000000 90                      nop                          ; keeps the debugger happy
    37                                  
    38                                                               ; Read a buffer full of text from stdin
    39 00000001 B803000000              Read:   mov eax, 3           ; Specify sys_read call
    40 00000006 BB00000000                      mov ebx, 0           ; Specify file descriptor 0 - standard input
    41                                          
    42                                                               ; Setup registers to read from the buffer
    43 0000000B B9[00000000]                    mov ecx, Buff        ; Pass address of the buffer to read to
    44 00000010 BA10000000                      mov edx, BUFFLEN     ; Tell sys_read to read one char from input
    45 00000015 CD80                            int 80h              ; Call sys_read
    46 00000017 89C5                            mov ebp, eax         ; Save number of bytes read from file for later
    47 00000019 83F800                          cmp eax, 0           ; If eax=0, sys_read reached EOF in stdin
    48 0000001C 7453                            je Done
    49                                          
    50                                                              
    51 0000001E BE[00000000]                    mov esi, Buff        ; Place the address of buffer into esi
    52 00000023 BF[00000000]                    mov edi, HexStr      ; Place the address of line string into edi
    53 00000028 31C9                            xor ecx, ecx         ; Clear line string pointer to 0
    54                                  
    55                                                               ; Go through the buffer and convert binary values to hex digits:
    56                                  Scan:
    57 0000002A 31C0                            xor eax,eax          ; Clear eax to 0
    58                                                               ; Calculate offset into HexStr, which is the value in ecx * 3
    59 0000002C 89CA                            mov edx, ecx         ; Copy the character counter into edx
    60 0000002E D1E2                            shl edx, 1           ; Multiply pointer by 2 using left shift
    61 00000030 01CA                            add edx, ecx         ; Complete the multiplication by 3
    62                                          
    63                                                                     ; Get a character from the buffer and put it in both eax and ebx
    64 00000032 8A040E                          mov al, byte [esi+ecx]     ; Put a byte from input buffer into al
    65 00000035 89C3                            mov ebx, eax               ; Copy the byte in bl for the second nybble; nybble = 4 bits
    66                                          
    67                                                                     ; Look up the low nybble and insert it into the string
    68 00000037 240F                            and al, 0Fh                ; Mask out all but the low nybble
    69 00000039 8A80[31000000]                  mov al, byte[Digits+eax]   ; Lookup the char equivalent of nybble
    70 0000003F 8882[02000000]                  mov byte[HexStr+edx+2], al ; Write LSB (least significant bit) char digit to line string
    71                                          
    72                                                                     ; Look up high nybble character and insert it into the string
    73 00000045 C0EB04                          shr bl,4                   ; Shift high 4 bits of char into low 4 bits
    74 00000048 8A9B[31000000]                  mov bl,byte [Digits+ebx]   ; Look up char equivalent of nybble
    75 0000004E 889A[01000000]                  mov byte [HexStr+edx+1],bl ; Write MSB (most significant bit) digit to line string
    76                                          
    77                                                                     ; Bump the buffer pointer to the next character and see if weâ€™re done
    78 00000054 41                              inc ecx                    ; Increment line string pointer
    79 00000055 39E9                            cmp ecx,ebp                ; Compare to the number of chars in the buffer
    80 00000057 76D1                            jna Scan                   ; Loop back if ecx is <= number of chars in buffer
    81                                                               
    82                                                                     ; Write the hex result to stdout
    83                                          
    84 00000059 B804000000                      mov eax,4                  ; Specify sys_write call
    85 0000005E BB01000000                      mov ebx,1                  ; Specify file descriptor 1: standard output
    86 00000063 B9[00000000]                    mov ecx,HexStr             ; Pass offset of line string
    87 00000068 BA31000000                      mov edx,HEXLEN             ; Pass size of the line string
    88 0000006D CD80                            int 80h                    ; Make kernel call to display line string
    89 0000006F EB90                            jmp Read                   ; Loop back and load file buffer again
    90                                  
    91                                  Done:
    92 00000071 B801000000                      mov eax,1                  ; Code for exit syscall
    93 00000076 BB00000000                      mov ebx,0                  ; Return a code of zero
    94 0000007B CD80                            int 80H                    ; Make kernel call
    95                                  
    96                                  
